name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: pygoat/pygoat
  PYTHON_VERSION: '3.9'

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # SCA - Software Composition Analysis
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep pip-audit

    - name: SCA - Safety Check (High/Critical)
      run: |
        echo "Running Safety check for known vulnerabilities..."
        safety check --full-report > safety-report.json || true
        safety check --full-report | grep -i "high\|critical" || true

    - name: SCA - Pip Audit
      run: |
        echo "Running pip-audit for dependency vulnerabilities..."
        pip-audit --format json --output pip-audit-report.json || true
        pip-audit --desc || true


    # Secrets Scanning
    - name: Secrets Scan - GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Secrets Scan - TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: fd43c9931d867fe210ac943ddaeed800525493ef
        head: HEAD
        extra_args: --debug --only-verified

    # SAST - Static Application Security Testing
    - name: SAST - Bandit Security Linter
      run: |
        echo "Running Bandit SAST scan..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -ll -i || true

    - name: SAST - Semgrep
      run: |
        python -m pip install semgrep
        echo "Running Semgrep SAST scan..."
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=p/security-audit --config=p/owasp-top-ten . || true

    # Build Docker Image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        docker images

    # Container Security Scanning
    - name: Container Scan - Trivy
      run: |
        echo "Installing Trivy..."
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        echo "Running Trivy container scan..."
        trivy image --format json --output trivy-report.json ${{ env.IMAGE_NAME }}:${{ github.sha }} || true
        trivy image --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}:${{ github.sha }} || true

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.sha }}
        path: |
          *-report.json
          *.sarif
        retention-days: 30

  dast-testing:
    runs-on: ubuntu-latest
    needs: security-analysis
    
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      run: |
        echo "Building image for DAST testing..."
        docker build -t pygoat-test:latest .

    # DAST - Dynamic Application Security Testing
    - name: Start application for DAST
      run: |
        echo "Starting PyGoat application..."
        docker run -d -p 8000:8000 --name pygoat-test pygoat-test:latest
        
        echo "Waiting for application to start..."
        sleep 10
        docker ps -a
        docker logs pygoat-test
        tree -L 2

        echo "Testing application availability..."
        for i in {1..10}; do
          if curl -f http://localhost:8000/; then
            echo "Application is running!"
            break
          fi
          echo "Attempt $i failed, waiting..."
          sleep 10
        done

    - name: DAST - OWASP ZAP Baseline Scan
      run: |
        echo "Running OWASP ZAP baseline scan..."
        docker run -v "$(pwd)":/zap/wrk/:rw \
          -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://host.docker.internal:8000 \
          -J zap-baseline-report.json \
          -r zap-baseline-report.html || true


    - name: DAST - Nikto Web Scanner
      run: |
        echo "Running Nikto web scanner..."
        docker run --rm --add-host=host.docker.internal:host-gateway \
          ghcr.io/sullo/nikto -h http://host.docker.internal:8000 \
          -Format json -output nikto-report.json || true

    - name: Stop test container
      run: |
        docker stop pygoat-test || true
        docker rm pygoat-test || true

    - name: Upload DAST Reports
      uses: actions/upload-artifact@v4
      with:
        name: dast-reports-${{ github.sha }}
        path: |
          zap-*.json
          zap-*.html
          nikto-report.json
        retention-days: 30

  security-report:
    runs-on: ubuntu-latest
    needs: [security-analysis, dast-testing]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Security Reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports-${{ github.sha }}
        path: ./reports/

    - name: Download DAST Reports
      uses: actions/download-artifact@v3
      with:
        name: dast-reports-${{ github.sha }}
        path: ./reports/
      continue-on-error: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Generate Security Summary
      run: |
        python3 << 'EOF'
        import json
        import os
        from datetime import datetime
        
        def load_json_report(filename):
            filepath = os.path.join('./reports', filename)
            if os.path.exists(filepath):
                try:
                    with open(filepath, 'r') as f:
                        return json.load(f)
                except:
                    return None
            return None
        
        # Generate summary
        summary = {
            "timestamp": datetime.now().isoformat(),
            "commit": "${{ github.sha }}",
            "scans": {}
        }
        
        # Safety results
        safety_data = load_json_report('safety-report.json')
        if safety_data:
            vulnerabilities = len(safety_data) if isinstance(safety_data, list) else len(safety_data.get('vulnerabilities', []))
            summary["scans"]["SCA_Safety"] = {
                "total_vulnerabilities": vulnerabilities,
                "status": "FAIL" if vulnerabilities > 0 else "PASS"
            }
        
        # Bandit results
        bandit_data = load_json_report('bandit-report.json')
        if bandit_data:
            results = bandit_data.get('results', [])
            high_severity = [r for r in results if r.get('issue_severity') in ['HIGH', 'MEDIUM']]
            summary["scans"]["SAST_Bandit"] = {
                "total_issues": len(results),
                "high_medium_issues": len(high_severity),
                "status": "FAIL" if len(high_severity) > 0 else "PASS"
            }
        
        # Trivy results
        trivy_data = load_json_report('trivy-report.json')
        if trivy_data:
            results = trivy_data.get('Results', [])
            vulnerabilities = []
            for result in results:
                vulnerabilities.extend(result.get('Vulnerabilities', []))
            
            high_critical = [v for v in vulnerabilities if v.get('Severity') in ['HIGH', 'CRITICAL']]
            summary["scans"]["Container_Trivy"] = {
                "total_vulnerabilities": len(vulnerabilities),
                "high_critical": len(high_critical),
                "status": "FAIL" if len(high_critical) > 0 else "PASS"
            }
        
        # Generate markdown report
        with open('security-summary.md', 'w') as f:
            f.write(f"# üîí Security Scan Summary\n\n")
            f.write(f"**Commit:** `{summary['commit'][:8]}`\n")
            f.write(f"**Generated:** {summary['timestamp']}\n\n")
            
            f.write("## üìä Scan Results\n\n")
            
            for scan_name, data in summary["scans"].items():
                status_emoji = "‚úÖ" if data["status"] == "PASS" else "‚ùå"
                f.write(f"### {status_emoji} {scan_name.replace('_', ' ')}\n")
                
                for key, value in data.items():
                    if key != "status":
                        f.write(f"- **{key.replace('_', ' ').title()}:** {value}\n")
                f.write("\n")
            
            # Recommendations
            failed_scans = [name for name, data in summary["scans"].items() if data["status"] == "FAIL"]
            if failed_scans:
                f.write("## üö® Action Required\n\n")
                f.write("The following scans found security issues that need attention:\n\n")
                for scan in failed_scans:
                    f.write(f"- {scan.replace('_', ' ')}\n")
                f.write("\n**Please review the detailed reports and fix the identified vulnerabilities.**\n")
            else:
                f.write("## üéâ All Security Scans Passed!\n\n")
                f.write("No critical security issues were found in this build.\n")
        
        # Save JSON summary
        with open('security-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        
        print("Security summary generated successfully!")
        EOF

    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-${{ github.sha }}
        path: |
          security-summary.md
          security-summary.json
        retention-days: 30

    - name: Comment Security Summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

  deploy:
    runs-on: ubuntu-latest
    needs: [security-analysis, dast-testing]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run final security check on pushed image
      run: |
        echo "Running final security check on pushed image..."
        docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Install Trivy for final check
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        trivy image --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## üöÄ PyGoat DevSecOps Release v${{ github.run_number }}
          
          **Docker Image:** `${{ env.IMAGE_NAME }}:${{ github.sha }}`
          
          ### Security Scans Completed:
          - ‚úÖ SCA (Software Composition Analysis)
          - ‚úÖ SAST (Static Application Security Testing) 
          - ‚úÖ Secrets Scanning
          - ‚úÖ Container Security Scanning
          - ‚úÖ DAST (Dynamic Application Security Testing)
          
          All security scans have been completed and vulnerabilities addressed.
        draft: false
        prerelease: false